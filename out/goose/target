#!/bin/bash

#title           	:target
#description     	:Script to make C projects more manageable
#author		 				:Javier Romera Llave @lromeraj
#date            	:20191103
#version         	:0.3.1
#notes           	:Install "figlet" and "valgrind"
#bash_version    	:4.4.19(1)-release
#==============================================================================

# main project dir
MAIN_DIR_NAME=$(basename "$(pwd)" )

# presets
CONF=./target.conf # configuration file
INCDIRS=() # include dirs
OFILES=() # object files to be linked
ENV="" # global ennvironment

# ascii decorations
ASCII_TITLE=.ascii_title
ASCII_VERSION=.ascii_version


#===== Text decorations =====#
NC='\033[0m'              # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

success()
{
  echo -en "${BGreen}success:${NC} $1" >&1
}

warn()
{
  echo -en "${BYellow}warn:${NC} $1" >&1
}

info()
{
  echo -en "${BCyan}info:${NC} $1" >&1
}

error()
{
  echo -en "${BRed}error:${NC} $1" >&1
}


_clean()
{

  BUFFER=()
  OBJDIR=$(env_get "OBJDIR")

  BUFFER+=( "$(env_get "TARGET")" )

  for m in $(env_get "SRCS"); do
    BUFFER+=( "$OBJDIR/$m.o" )
  done

  _fnStart "CLEAN START"

  for f in "${BUFFER[@]}"; do
    if [ -e "$f" ]; then
      info "removing: ${BYellow}$f${NC}\\n"
      rm -rf "$f"
    else
      info "not found: ${BBlue}$f${NC}\\n"
    fi
  done

  _fnEnd "CLEAN END"


}

_fnStart()
{
  echo -en "========== [${BPurple}$ENV${NC}] ${BGreen}$1${NC}\\n" >&1
}

_fnEnd()
{
  echo -en "========== [${BPurple}$ENV${NC}] ${BRed}$1${NC}\\n" >&1
}

_link()
{
  TARGET=$(env_get "TARGET")
  OBJDIR=$(env_get "OBJDIR")
  LDFLAGS=$(env_get "LDFLAGS")
  OFILES=()

  for f in $(env_get "SRCS"); do
    if [[ -e "$OBJDIR/$f.o" ]]; then
      OFILES+=( "$OBJDIR/$f.o" )
    fi
  done

	gcc "${OFILES[@]}" $LDFLAGS -o $TARGET

  return $?
}

# time of last data modification, seconds since Epoch
_modDate()
{
	stat -L -c %Y "$1"
}

_date()
{
  date '+%Y%d%m'
}

# finds a version inside a file
_findV()
{
  grep -P -m1 '^v[0-9]' "$1"
}

_avai()
{
  command -v "$1"
}

env_get()
{

  _env=""
  found=false

  if [[ -z $ENV ]]; then
    reg1="^\\["
  else
    reg1="^\\[$ENV\\]"
  fi

  reg2="^\\["

  while read -r line; do

    arr=()
    buff=()
    f=0

    # detect env [env]
    if [[ -z $_env ]]; then
      if [[ $line =~ $reg1 ]]; then
        _env=${BASH_REMATCH[0]}
      fi
      continue;
    else
      if [[ $line =~ $reg2 ]]; then break; fi

    fi

    isStr=0

    # parse line
    for (( i=0; i<${#line}; i++ )); do

      c="${line:$i:1}"

      addChar=true

      case $c in

        "#")
          break
        ;;

        "=")
          f=1
          addChar=false
        ;;

        "[")
          f=3
          addChar=false
        ;;

        '"')
          isStr=$(( 1 - isStr ))
          addChar=false
        ;;

        "]")
          f=4
          addChar=false
        ;;
      esac

      if [[ $c == " " ]]; then
        addChar=false
      fi

      if [ $isStr -eq 1 ] && [[ $c != '"' ]]; then
        addChar=true
      fi

      case $f in

        1)
          if [[ "${buff[0]}" == "$1" ]]; then
            found=true
          else break; fi
        ;;

        3)
          if [[ $c == "," ]] && [[ -n ${buff[ $f ]} ]]; then
            arr+=( "${buff[ $f ]}" )
            buff[ $f ]=""
            addChar=false
          fi
        ;;

        4)
          arr+=( "${buff[ 3 ]}" )
          break;
        ;;

      esac

      if [ $addChar == true ]; then
        buff[ $f ]+=$c;
      fi


    done

    if [ $found == true ]; then

      if [ $f -eq 1 ]; then
        echo "${buff[1]}" >&1
      elif [ $f -eq 4 ]; then
        echo "${arr[*]}" >&1
      fi
      break;
    fi

  done < $CONF

}

# compiles a given dir
_comp()
{

  TARGET=$(env_get "TARGET")
  SRCDIR=$(env_get "SRCDIR")
  OBJDIR=$(env_get "OBJDIR")

  if [ -d "${SRCDIR}" ]; then

    for re in $( env_get "SRCS" ); do

      cit=false # compilation flag
      c_file="${SRCDIR}/$re.c"
      o_file="${OBJDIR}/$re.o"
      FILES=()
      FILES+=( "$c_file" )
      FILES+=( "$o_file" )

      for f in "${FILES[@]}"; do

        fname=$(basename -- "$f")
        ext=${fname##*.}
        reg="^[ch]$"

        if [[ ! $ext =~ $reg ]]; then continue; fi

        if [ ! -e "$c_file" ]; then
          error "no such file: $c_file\\n"
          return 1
        fi

  			if [ -e "$TARGET" ]; then
  				if [ -e "$o_file" ]; then
  					if [ "$(_modDate "$TARGET" )" -lt "$(_modDate "$f" )" ]; then
  						cit=true
  					fi
          else
            cit=true
          fi
  			else
          cit=true
        fi

      done

      if [ $cit == true ] && [[ -e $c_file ]]; then
        info "compiling: ${BYellow}$c_file${NC} -> $o_file\\n"

        gcc $CFLAGS -c "$c_file" -o "$o_file"
      else
        info "up to date: ${BGreen}$c_file${NC} -> $o_file\\n"
      fi

    done

	else
		error "${Yellow}$SRCDIR${NC}: no such directory\\n"
		echo 1
	fi

}

# check if there are as least 1 argument
if [ $# -lt 1 ]; then
	error "too few args\\n"
	exit 1
fi

# load configuration file
if [[ ! -e $CONF ]]; then
  error "$CONF: no such file\\n"
  exit 1
else
  ENV=$(grep -Po -m1 '^\[\K[^\]]+' "$CONF")
fi

while [ $# -gt 0 ]; do

  case $1 in

    -e|--env)

      reg="^-"
      if [[ $2 =~ $reg ]] || [[ -z $2 ]]; then
        error "env: too few args\\n"
        shift
      else
        grep -Pq "^\[$2\]" $CONF
        if [[ $? -eq 0 ]]; then
          ENV="$2"
          shift 2
        else

          reg="^-e|^--env"
          error "env: [$2] not found\\n"
          shift 2
          while  [ $# -gt 0 ]; do
            if [[ $1 =~ $reg ]]; then break; fi
            shift
          done

        fi

      fi

    ;;

    -c|--comp)

      ASCII_TITLE=$(env_get "ASCII_TITLE")
      ASCII_VERSION=$(env_get "ASCII_VERSION")

      if [ -e "$ASCII_TITLE" ]; then
        echo -e "${BPurple}$( cat "$ASCII_TITLE" )${NC}"
      fi

      if [ -e "$ASCII_VERSION" ]; then
        echo -e "${BYellow}$( cat "$ASCII_VERSION" )${NC}"
      fi

      _fnStart "COMPILATION START"
      _comp
      if [ $? -eq 0 ]; then
        _link
        if [ $? -ne 0 ]; then
          error "link failed\\n"
        else
          success "link success -> ${BCyan}${TARGET}${NC}\\n"
        fi
      else
        error "compilation failed\\n"
      fi

      _fnEnd "COMPILATION END"

      shift 1

    ;;

    -d|--dist)

      TARGET=$(env_get "TARGET")
      DISTDIR=$(env_get "DISTDIR")
      ASCII_VERSION=$(env_get "ASCII_VERSION")

      name="${TARGET}_$(_date).zip"


      if [ -e CHANGELOG ]; then

        _v=$(_findV CHANGELOG) # find version

        if [[ ! -z $_v ]]; then

          name="${TARGET}_${_v}_$(_date).zip"

          if [[ -n $( _avai figlet ) ]]; then
            echo "" > "$ASCII_VERSION"
            figlet "${_v}" >> "$ASCII_VERSION"
          fi

        fi

      fi

      _fnStart "DIST START"
      # go to parent dir
      cd ..

      # zip the main project dir
      zip --symlinks -r "$name" "$MAIN_DIR_NAME" -x "*.o" "*.zip"

      # move the file inside the project dir again
      mv "$name" "$MAIN_DIR_NAME"

      # cd to the main dir
      cd "$MAIN_DIR_NAME"

      _fnEnd "DIST END"

      if [[ -d ${DISTDIR} ]]; then
        mv "$name" "$DISTDIR"
      else
        warn "dist: ${DISTDIR}: no such directory\\n"
      fi


      shift 1

    ;;

    -r|--run)

      _ARGS=()
      TARGET=$(env_get "TARGET")
      TARGET_ARGS=$(env_get "TARGET_ARGS")

      if [[ -e ${TARGET} ]]; then

        reg="^-e|^--env"

        shift
        while [[ $# -gt 0 ]]; do
          if [[ $1 =~ $reg ]]; then break;
          else
            _ARGS+=( "$1" )
            shift
          fi
        done

        _fnStart "RUN START"
        if [ ${#_ARGS[@]} -gt 0 ]; then
          "./${TARGET}" "${_ARGS[@]}"
        else
          "./${TARGET}" "${TARGET_ARGS}"
        fi
        _fnEnd "RUN END"

      else
        warn "run: not compiled yet\\n"
        shift 1
      fi


    ;;

    -m|--cmem)

      TARGET=$(env_get "TARGET")

      if [[ -e "${TARGET}" ]]; then

        if [[ -n $( _avai valgrind ) ]]; then
          shift 1
          valgrind "$(env_get "VGR_FLAGS")" "./${TARGET}" "$@"
        else
          error "valgrind: command not found\\n"
        fi

      else
        warn "cmem: not compiled yet\\n"
      fi

      shift

    ;;

    --clean)
      _clean
      shift 1
    ;;

    -h|--help)

      shift 1
      break;
    ;;

    *)
      error "$1: unknown option\\n"
      shift 1
    ;;

  esac

done
